What is an Abstract Factory?
->Abstract factory is used when we have two or more objects which work together forming a kit or set and there can be multiple sets or kits that can be created by client code.

->So, we separate client code from concrete objects forming such a set and also from the code which creates these sets.


->Age Of EmpireGame

	Medieval Age
	Naval Unit-> Wooden ship(Galley)
	Land Unit->Soldiers with handmade weapons(swordsman)

	Industrial Age
	Naval Unit-> Iron Strong ship(Irondad)
	Land Unit->Soldiers with Rifle and high weapons(Rifleman)


UML diagram

class AbstractFactoryEx

GameUnitFactory<abstract_factory>:Interface Defining operations to create products.
	createLandUnit():LandUnit
	createNavalUnit():NavalUnit

IndustrialAgeGameUnitFactory<concrete_factory>: Implements GameUnitFactory(Factory) & creates products from a particular family
	createLandUnit():Rifleman
	createNavalUnit():Ironclad

MedievalAgeGameUnitFactory<concrete_factory>: Implements GameUnitFactory(Factory) & creates products from a particular family
	createLandUnit():Swordsman
	createNavalUnit():Galley

createLandUnit->createProductA
createNavalUnit->createProductB

Client: Uses Abstract factory & abstract products.


LandUnit(AbstractProductA):Interface for a type of product
	Swordsman(ProductAOne):Concrete Product.Implements product interface or class.
	Rifleman(ProductATwo):Concrete Product.Implements product interface or class.

NavalUnit(AbstractProductB):Interface for a type of product
	Galley(ProductBOne):Concrete Product.Implements product interface or class.
	Irondad(ProductBTwo):Concrete Product.Implements product interface or class.







